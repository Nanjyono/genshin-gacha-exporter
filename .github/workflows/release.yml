name: Windows Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build Log
        id: log
        run: |
          echo Old Tag: `git tag --sort=-taggerdate | head -2 | tail -1`
          echo New Tag: `git tag --sort=-taggerdate | head -1`
          git log --pretty=format:'* %h: %s' `git tag --sort=-taggerdate | head -2 | tail -1`..`git tag --sort=-taggerdate | head -1`
          log=$(git log --pretty=format:'* %h: %s' `git tag --sort=-taggerdate | head -2 | tail -1`..`git tag --sort=-taggerdate | head -1`)
          echo $log
          log="${log//'%'/'%25'}"
          log="${log//$'\n'/'%0A'}"
          log="${log//$'\r'/'%0D'}"
          echo "::set-output name=log::$log"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated Release by GitHub Action CI
            [Changes](${{ github.event.compare }}):
            ${{ steps.log.outputs.log }}
          draft: false
          prerelease: true

  build:
    needs: create_release
    name: Build Release Assets
    runs-on: windows-latest
    env:
      RUSTFLAGS: -Ctarget-feature=+crt-static

    strategy:
      fail-fast: false
      matrix:
        edition:
          - target: x86_64-pc-windows-msvc
            name: x64
          - target: i686-pc-windows-msvc
            name: x86

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.edition.target }}
          toolchain: stable
          default: true
          override: true

      - name: Build
        run: cargo build --target ${{ matrix.edition.target }} --release

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: target/${{ matrix.edition.target }}/release/genshin-gacha-exporter.exe
          asset_name: genshin-gacha-exporter-${{ matrix.edition.name }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
